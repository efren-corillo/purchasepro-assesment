#
#--------------------------------------------------------------------------
# Image Setup
#--------------------------------------------------------------------------
#

FROM php:8.2-fpm

LABEL authors="efren.corillo@doublbyear.dev"

# Set Environment Variables
ENV DEBIAN_FRONTEND noninteractive

#
#--------------------------------------------------------------------------
# Software's Installation
#--------------------------------------------------------------------------
#
# Installing tools and PHP extensions using "apt", "docker-php", "pecl",
#

# Install "curl", "libmemcached-dev", "libpq-dev", "libjpeg-dev",
#         "libpng-dev", "libfreetype6-dev", "libssl-dev", "libmcrypt-dev",
RUN set -eux; \
    apt-get update; \
    apt-get upgrade -y; \
    apt-get install -y --no-install-recommends \
            curl \
            zip \
            unzip \
            libmemcached-dev \
            libz-dev \
            libpq-dev \
            libjpeg-dev \
            libpng-dev \
            libfreetype6-dev \
            libssl-dev \
            libwebp-dev \
            libxpm-dev \
            libmcrypt-dev \
            libonig-dev; \
    rm -rf /var/lib/apt/lists/*

RUN set -eux; \
    # Install the PHP pdo_mysql extension
    docker-php-ext-install pdo_mysql; \
    # Install the PHP pdo_pgsql extension
    docker-php-ext-install pdo_pgsql; \
    # Install the PHP gd library
    docker-php-ext-configure gd \
            --prefix=/usr \
            --with-jpeg \
            --with-webp \
            --with-xpm \
            --with-freetype; \
    docker-php-ext-install gd; \
    php -r 'var_dump(gd_info());'

# Install composer (php package manager)
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Replace '1000' with your host user's UID and GID
ARG USER_UID=1000
ARG USER_GID=1000

# Change the UID and GID for www-data to match the host user
RUN usermod -u $USER_UID www-data && groupmod -g $USER_GID www-data

# Copy composer.lock and composer.json into the working directory
COPY composer.json /var/www/html/

# Set working directory
WORKDIR /var/www/html/

COPY . .

# Install nvm
ENV NVM_DIR /usr/local/nvm
ENV NODE_VERSION 20.0.0

RUN mkdir -p $NVM_DIR
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

# Install Node.js and npm
RUN . $NVM_DIR/nvm.sh && nvm install $NODE_VERSION
RUN . $NVM_DIR/nvm.sh && nvm use v$NODE_VERSION
RUN . $NVM_DIR/nvm.sh && nvm alias default v$NODE_VERSION

# Ensure node and npm are in PATH
ENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

# Install Yarn
RUN npm install -g yarn

# Copy the bash_aliases file
COPY docker/bash_aliases /var/www/.bash_aliases

# Append the source command to .bashrc and add permission
RUN echo "if [ -f /var/www/.bash_aliases ]; then . /var/www/.bash_aliases; fi" >> /var/www/.bashrc
RUN chown www-data:www-data /var/www/.bash_aliases /var/www/.bashrc
RUN chmod 644 /var/www/.bash_aliases /var/www/.bashrc

# Set ownership and permissions for the storage directory
USER root
RUN chown -R www-data:www-data /var/www/html/storage
RUN chmod -R 775 /var/www/html/storage

USER www-data

# Set ownership and permissions for the laravel.log file
RUN chown www-data:www-data /var/www/html/storage/logs/laravel.log
RUN chmod 664 /var/www/html/storage/logs/laravel.log


